import os
import random
import datetime
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# --- –ö–∞—Ä—Ç—ã –¥–Ω—è ---
# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∫–∞—Ä—Ç. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å URL –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏.
CARDS = [
    {"name": "–°–≤–µ—Ç–ª–∞—è –∫–∞—Ä—Ç–∞", "image": "https://example.com/light_card.jpg"},
    {"name": "–¢—ë–º–Ω–∞—è –∫–∞—Ä—Ç–∞", "image": "https://example.com/dark_card.jpg"},
    {"name": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞", "image": "https://example.com/neutral_card.jpg"},
]

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ä—Ç –¥–Ω—è (–≤ –ø–∞–º—è—Ç–∏) ---
USER_CARDS = {}

# --- –ö–æ–º–∞–Ω–¥—ã –∏ –∫–æ–ª–±—ç–∫–∏ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="daily_card")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–î–æ–º–∏–∫ –°–æ–≤—ã* ü¶â\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "*–û –ø—Ä–æ–µ–∫—Ç–µ '–î–æ–º–∏–∫ –°–æ–≤—ã'*\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞. "
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã—Ç—è–≥–∏–≤–∞—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É, "
        "–∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –ø—É—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. üÉè",
        parse_mode='Markdown'
    )

# --- –ö–∞—Ä—Ç–∞ –¥–Ω—è ---

async def daily_card_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("‚ú® –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è", callback_data="draw_card")]]
    
    user_id = query.from_user.id
    if user_id in USER_CARDS:
        keyboard.append([InlineKeyboardButton("üìú –ú–æ–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è", callback_data="my_cards")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª *–ö–∞—Ä—Ç–∞ –¥–Ω—è*.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def draw_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    card = random.choice(CARDS)
    date_str = datetime.date.today().strftime('%d.%m.%Y')

    
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_CARDS.setdefault(user_id, []).append({"date": date_str, "name": card["name"], "image": card["image"]})

    await query.message.reply_photo(
        photo=card["image"],
        caption=f"üóì {date_str}\n–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è: *{card['name']}*",
        parse_mode='Markdown'
    )

    # –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è
    await daily_card_menu(update, context)

async def show_my_cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    cards = USER_CARDS.get(user_id, [])

    if not cards:
        await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç –¥–Ω—è.")
        return

    messages = []
    for card in cards[-5:]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–∞—Ä—Ç
        messages.append(f"üóì {card['date']} ‚Äî *{card['name']}*")

    await query.edit_message_text(
        "*–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è:*\n\n" + "\n".join(messages),
        parse_mode='Markdown'
    )

# --- –ó–∞–ø—É—Å–∫ ---

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –î–æ–º–∏–∫ –°–æ–≤—ã...")
    print(f"–¢–æ–∫–µ–Ω –∏–∑ .env: {BOT_TOKEN}")

    # –°–æ–∑–¥–∞—ë–º event loop, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è Python 3.11+ –Ω–∞ Windows)
    try:
        asyncio.get_event_loop()
    except RuntimeError:
        asyncio.set_event_loop(asyncio.new_event_loop())

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(daily_card_menu, pattern="^daily_card$"))
    app.add_handler(CallbackQueryHandler(draw_card, pattern="^draw_card$"))
    app.add_handler(CallbackQueryHandler(show_my_cards, pattern="^my_cards$"))
    app.add_handler(CallbackQueryHandler(about_bot, pattern="^about_bot$"))

    app.run_polling()
