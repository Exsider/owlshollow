import os 
import random
import json
import datetime
import asyncio
import telegram
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
    KeyboardButton,
    ReplyKeyboardMarkup)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler, 
    filters,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# --- –ü—É—Ç–∏ –∏ –ø–∞–ø–∫–∏ ---
WELCOME_IMAGE_PATH = "assets/owl_welcome.jpg"
CARDS_DIR = "cards"
USER_CARDS_FILE = "json/cards_history.json"
PRODUCTS_FILE = "json/products.json"
ABOUT_FILE = "json/about.json"
CARDS_INFO_FILE = "json/cards_info_full.json"
USER_NAMES_FILE = "json/user_names.json"
USER_PHONES_FILE = "json/user_phones.json"
CARD_EXTENSIONS = {'.jpg', '.jpeg', '.png'}

CARDS = []
USER_CARDS = {}
USER_NAMES = {}
USER_PHONES = {}
PRODUCTS = []
ABOUT_TEXT = {}
CARD_DESCRIPTIONS = {}

def load_json_file(filepath):
    if os.path.exists(filepath):
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_json_file(filepath, data):
    with open(filepath, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç ---
def load_cards_from_folder():
    cards = []
    for fname in os.listdir(CARDS_DIR):
        if os.path.splitext(fname)[1].lower() in CARD_EXTENSIONS:
            cards.append({
                "name": os.path.splitext(fname)[0],
                "image_path": os.path.join(CARDS_DIR, fname)
            })
    return cards

CARDS = load_cards_from_folder()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def load_user_cards():
    if os.path.exists(USER_CARDS_FILE):
        with open(USER_CARDS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_user_cards():
    with open(USER_CARDS_FILE, "w", encoding="utf-8") as f:
        json.dump(USER_CARDS, f, ensure_ascii=False, indent=2)

USER_CARDS = load_user_cards()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def load_user_names():
    if os.path.exists(USER_NAMES_FILE):
        with open(USER_NAMES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_user_names():
    with open(USER_NAMES_FILE, "w", encoding="utf-8") as f:
        json.dump(USER_NAMES, f, ensure_ascii=False, indent=2)

USER_NAMES = load_user_names()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def load_user_phones():
    if os.path.exists(USER_PHONES_FILE):
        with open(USER_PHONES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_user_phones():
    with open(USER_PHONES_FILE, "w", encoding="utf-8") as f:
        json.dump(USER_PHONES, f, ensure_ascii=False, indent=2)

USER_PHONES = load_user_phones()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ---
def load_products():
    if os.path.exists(PRODUCTS_FILE):
        with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

PRODUCTS = load_products()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ ---
def load_about():
    if os.path.exists(ABOUT_FILE):
        with open(ABOUT_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

ABOUT_TEXT = load_about()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –∫–∞—Ä—Ç ---
def load_card_descriptions():
    if os.path.exists(CARDS_INFO_FILE):
        with open(CARDS_INFO_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

CARD_DESCRIPTIONS = load_card_descriptions()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
CARDS = load_cards_from_folder()
USER_CARDS = load_json_file(USER_CARDS_FILE)
USER_NAMES = load_json_file(USER_NAMES_FILE)
USER_PHONES = load_json_file(USER_PHONES_FILE)
PRODUCTS = load_json_file(PRODUCTS_FILE)
ABOUT_TEXT = load_json_file(ABOUT_FILE)
CARD_DESCRIPTIONS = load_json_file(CARDS_INFO_FILE)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

#--- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω ---
async def welcome_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in USER_NAMES:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏
        with open(WELCOME_IMAGE_PATH, "rb") as img:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=img,
                caption=(
                    "‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –ò—Å–∫–∞—Ç–µ–ª—å! ‚ú®\n\n"
                    "–¢—ã –≤–æ—à—ë–ª –≤ –î–æ–º–∏–∫ –°–æ–≤—ã ‚Äî –º–µ—Å—Ç–æ —Å–∏–ª—ã, —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞.\n\n"
                    "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã—Ç—è–≥–∏–≤–∞—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–∞–º–∏.\n"
                    "–ê —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –∑–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –∑–∞–≥–ª—è–Ω—É—Ç—å –≤–Ω—É—Ç—Ä—å —Å–µ–±—è.\n\n"
                    "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, –ò—Å–∫–∞—Ç–µ–ª—å? –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –Ω–∏–∂–µ üëá"
                )
            )
        return
    await show_main_menu(update, context)

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in USER_NAMES:
        USER_NAMES[user_id] = update.message.text.strip()
        save_user_names()
        await update.message.reply_text(f"–†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {USER_NAMES[user_id]}! ü¶â")
        await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    name = USER_NAMES.get(user_id, "–ò—Å–∫–∞—Ç–µ–ª—å")
    keyboard = [
        [InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="daily_card")],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="products")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about_project")],
        [InlineKeyboardButton("üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ê—Ä–∫–∞–Ω", callback_data="calculate_arkana")],
        [InlineKeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", callback_data="share_phone")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–î–æ–º–∏–∫ –°–æ–≤—ã*, {name} ü¶â\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–î–æ–º–∏–∫ –°–æ–≤—ã*, {name} ü¶â\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def about_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    text = (
        f"*{ABOUT_TEXT.get('title', '')}*\n\n"
        f"{ABOUT_TEXT.get('intro', '')}\n\n"
        f"{ABOUT_TEXT.get('body', '')}\n\n"
        f"_{ABOUT_TEXT.get('footer', '')}_"
    )

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
    await query.edit_message_text(text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))

async def products_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    messages = []
    for product in PRODUCTS:
        messages.append(
            f"*{product['name']}*\n"
            f"_{product['description']}_\n"
            f"üëâ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: {product['result']}\n"
        )

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
    await query.edit_message_text(
        "*üì¶ –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n" + "\n".join(messages),
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def daily_card_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("‚ú® –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è", callback_data="draw_card")]]
    user_id = str(query.from_user.id)
    if user_id in USER_CARDS:
        keyboard.append([InlineKeyboardButton("üÉè –ú–æ–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è", callback_data="my_cards")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.edit_message_text(
            "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª *–ö–∞—Ä—Ç–∞ –¥–Ω—è*.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except telegram.error.BadRequest:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞), –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text="‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª *–ö–∞—Ä—Ç–∞ –¥–Ω—è*.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def draw_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    today = datetime.date.today().strftime('%d.%m.%Y')

    user_history = USER_CARDS.get(user_id, [])
    if any(card["date"] == today for card in user_history):
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="daily_card")]]
        await query.edit_message_text(
            "üòä –í—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∏ –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    card = random.choice(CARDS)
    card_name = card["name"]
    short_name = card_name.split(". ", 1)[-1]  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    card_description = CARD_DESCRIPTIONS.get(short_name, {}).get("description", "")

    USER_CARDS.setdefault(user_id, []).append({
        "date": today,
        "name": card_name,
        "image_path": card["image_path"]
    })

    save_user_cards()

    with open(card["image_path"], "rb") as photo:
        await query.message.reply_photo(
            photo=photo,
            caption=f"{card_description}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="daily_card")]
           ])
        )

async def show_my_cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    cards = USER_CARDS.get(user_id, [])

    if not cards:
        await query.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç –¥–Ω—è.")
        return

    keyboard = [
        [InlineKeyboardButton(f"üóì {card['date']} ‚Äî {card['name']}", callback_data=f"view_card_{i}")]
        for i, card in enumerate(cards[-5:])
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="daily_card")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        "*–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è:*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def view_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    cards = USER_CARDS.get(user_id, [])

    try:
        index = int(query.data.split('_')[-1])
        card = cards[-5:][index]
    except (IndexError, ValueError):
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É.")
        return

    short_name = card['name'].split(". ", 1)[-1]  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    description = CARD_DESCRIPTIONS.get(short_name, {}).get("description", "")

    with open(card["image_path"], "rb") as photo:
        await query.message.reply_photo(
            photo=photo,
            caption=f"üÉè *{card['name']}* ‚Äî –∫–∞—Ä—Ç–∞ –æ—Ç {card['date']}\n\n{description}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_cards")]])
        )
async def share_phone_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=reply_markup)

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì≤ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω!")
    user_id = update.effective_user.id
    contact = update.message.contact
    if contact:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        USER_PHONES[user_id] = contact.phone_number
        save_user_phones()

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä: {contact.phone_number}",
        reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º.")

async def calculate_arkana_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

async def handle_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    date_text = update.message.text.strip()

    try:
        day, month, year = map(int, date_text.split("."))
        total = sum(map(int, list(f"{day:02d}{month:02d}{year}")))
        while total > 22:
            total = sum(map(int, str(total)))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        chat_member = await context.bot.get_chat_member(chat_id="@nady_blog", user_id=update.effective_user.id)
        if chat_member.status in ["member", "administrator", "creator"]:
            await update.message.reply_text(f"–í–∞—à –ê—Ä–∫–∞–Ω: {total} üåü")
        else:
            await update.message.reply_text("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @nady_blog üåÄ")
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤ –≤–∏–¥–µ –î–î.–ú–ú.–ì–ì–ì–ì")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
    print(f"–¢–æ–∫–µ–Ω –∏–∑ .env: {BOT_TOKEN}")

#  –°–æ–∑–¥–∞—ë–º event loop, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è Python 3.11+ –Ω–∞ Windows)
    try:
        asyncio.get_event_loop()
    except RuntimeError:
        asyncio.set_event_loop(asyncio.new_event_loop())

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", welcome_start))
    app.add_handler(MessageHandler(filters.CONTACT, handle_phone)) 
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name))
    app.add_handler(CallbackQueryHandler(show_main_menu, pattern="^start$"))
    app.add_handler(CallbackQueryHandler(daily_card_menu, pattern="^daily_card$"))
    app.add_handler(CallbackQueryHandler(draw_card, pattern="^draw_card$"))
    app.add_handler(CallbackQueryHandler(show_my_cards, pattern="^my_cards$"))
    app.add_handler(CallbackQueryHandler(view_card, pattern="^view_card_\\d+$"))
    app.add_handler(CallbackQueryHandler(about_project, pattern="^about_project$"))
    app.add_handler(CallbackQueryHandler(products_menu, pattern="^products$"))
    app.add_handler(CallbackQueryHandler(share_phone_request, pattern="^share_phone$"))
    app.add_handler(CallbackQueryHandler(calculate_arkana_prompt, pattern="^calculate_arkana$"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
