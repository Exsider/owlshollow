import os
import random
import json
import datetime
import asyncio
import telegram
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# --- –ü—É—Ç–∏ –∏ –ø–∞–ø–∫–∏ ---
CARDS_DIR = "cards"
USER_CARDS_FILE = "json/cards_history.json"
PRODUCTS_FILE = "json/products.json"
ABOUT_FILE = "json/about.json"
CARDS_INFO_FILE = "json/cards_info_full.json"
USER_NAMES_FILE = "json/user_names.json"
CARD_EXTENSIONS = {'.jpg', '.jpeg', '.png'}

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def load_user_cards():
    if os.path.exists(USER_CARDS_FILE):
        with open(USER_CARDS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_user_cards():
    with open(USER_CARDS_FILE, "w", encoding="utf-8") as f:
        json.dump(USER_CARDS, f, ensure_ascii=False, indent=2)

USER_CARDS = load_user_cards()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def load_user_names():
    if os.path.exists(USER_NAMES_FILE):
        with open(USER_NAMES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_user_names():
    with open(USER_NAMES_FILE, "w", encoding="utf-8") as f:
        json.dump(USER_NAMES, f, ensure_ascii=False, indent=2)

USER_NAMES = load_user_names()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ ---
def load_cards():
    cards = []
    for fname in os.listdir(CARDS_DIR):
        if os.path.splitext(fname)[1].lower() in CARD_EXTENSIONS:
            cards.append({
                "name": os.path.splitext(fname)[0],
                "image_path": os.path.join(CARDS_DIR, fname)
            })
    return cards

CARDS = load_cards()


def load_json(filepath):
    if os.path.exists(filepath):
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

PRODUCTS = load_json(PRODUCTS_FILE)
ABOUT_TEXT = load_json(ABOUT_FILE)
CARD_DESCRIPTIONS = load_json(CARDS_INFO_FILE)

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω ---
WELCOME_IMAGE_PATH = "assets/owl_welcome.png"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in USER_NAMES:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏
        with open(WELCOME_IMAGE_PATH, "rb") as img:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=img,
                caption=(
                    "‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –ò—Å–∫–∞—Ç–µ–ª—å! ‚ú®\n\n"
                    "–¢—ã –≤–æ—à—ë–ª –≤ –î–æ–º–∏–∫ –°–æ–≤—ã ‚Äî –º–µ—Å—Ç–æ —Å–∏–ª—ã, —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞.\n\n"
                    "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã—Ç—è–≥–∏–≤–∞—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–∞–º–∏.\n"
                    "–ê —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –∑–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –∑–∞–≥–ª—è–Ω—É—Ç—å –≤–Ω—É—Ç—Ä—å —Å–µ–±—è.\n\n"
                    "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, –ò—Å–∫–∞—Ç–µ–ª—å? –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –Ω–∏–∂–µ üëá‚ú®"
                )
            )
        return
    await show_main_menu(update, context)

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in USER_NAMES:
        USER_NAMES[user_id] = update.message.text.strip()
        save_user_names()
        await update.message.reply_text(f"–†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {USER_NAMES[user_id]}! ü¶â")
        await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    name = USER_NAMES.get(user_id, "–ò—Å–∫–∞—Ç–µ–ª—å")
    keyboard = [
        [InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="daily_card")],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="products")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about_project")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–î–æ–º–∏–∫ –°–æ–≤—ã*, {name} ü¶â\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–î–æ–º–∏–∫ –°–æ–≤—ã*, {name} ü¶â\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ –ø—Ä–æ–µ–∫—Ç–µ, –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–∞—Ä—Ç—ã –∏ —Ç.–¥.) –∑–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å id5
# ...

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
    print(f"–¢–æ–∫–µ–Ω –∏–∑ .env: {BOT_TOKEN}")

    try:
        asyncio.get_event_loop()
    except RuntimeError:
        asyncio.set_event_loop(asyncio.new_event_loop())

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(show_main_menu, pattern="^start$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
